"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1497],{51497:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var l=n(67294),a=n(81391),c=n(91573),u=n(87398),r=n(68947),o=n(12050),s=n(9167);const m=function(){return l.createElement(l.Fragment,null,l.createElement(u.Z,{as:"h3"},"Context.Consumer"),l.createElement(r.Z,null,"It is a ",l.createElement(s.B,null,"React component")," that ",l.createElement(s.BI,null,"subscribes")," to ",l.createElement(o.Z,null),l.createElement(s.I,null,"context changes"),". This component lets us subscribe to a context within a ",l.createElement(s.B,null,"function component"),"."),l.createElement(r.Z,null,l.createElement(s.IU,null,"Syntax:"),l.createElement(a.Z,{language:c.r.JSX},"<ReactContext.Consumer>\n  { value => { /* Render elements based on context value */ }\n</ReactContext.Consumer>\n")),l.createElement(r.Z,null,"This component requires a ",l.createElement(s.B,null,"function as a child"),". The function receives the current context value and returns a React node. The",l.createElement(o.Z,null)," ",l.createElement(s.BI,null,"value")," argument will be equal to the ",l.createElement(o.Z,null),l.createElement(s.BI,null,"value prop")," of the closest ",l.createElement(s.BI,null,"Provider")," for this context in the tree."))}}}]);