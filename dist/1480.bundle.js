"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1480],{11480:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var u=t(67294),l=t(81391),a=t(91573),r=t(87398),s=t(68947),c=t(9167);const o=function(){return u.createElement(u.Fragment,null,u.createElement(r.Z,{as:"h3"},"useImperativeHandle()"),u.createElement(s.Z,null,"This Hook customizes the instance value that is exposed to parent components when using ref. The useImperativeHandle should be used with forwardRef."),u.createElement(s.Z,null,u.createElement(c.IU,null,"Syntax:"),u.createElement(l.Z,{language:a.r.JSX},"useImperativeHandle(ref, createHandle, [deps])")),u.createElement(s.Z,null,u.createElement(c.IU,null,"Example:"),u.createElement(l.Z,{language:a.r.JSX},"const CustomInput = (props, ref) => {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => { inputRef.current.focus(); }\n  }));\n\n  return <input ref={inputRef} />;\n}\n\nCustomInput = forwardRef(CustomInput);\n")),u.createElement(s.Z,null,"In above code, a parent component that renders",u.createElement(c.BI,null,"<CustomInput ref={inputRef} />")," would be able to call",u.createElement(c.BI,null,"inputRef.current.focus()"),"."))}}}]);