"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1849,5262,868,1914,8755,5474],{15262:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(67294),a=n(81391),r=n(87398),c=n(68947),o=n(12050),u=n(9167),i=[{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"Local Scope")," (Own scope)")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"Enclosing Scope")," (Can be block, function or module scope)")},{label:l.createElement(u.B,null,"Global Scope")}];const s=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h3"},"Closure Scope Chain"),l.createElement(c.Z,null,"Every closure has three scopes:",l.createElement(u.GS,{items:i})),l.createElement(c.Z,null,"When nested functions themselves contain nested functions, this effectively creates a chain of function scopes."),l.createElement(a.Z,null,"const globalVal = 10; // Global Scope\nfunction sum(a) {\n  // outer scope\n  return function(b) {\n    // outer scope\n    return function(c){\n      // local scope\n      return a + b + c + globalVal;\n    }\n  }\n}\n\nconst result = sum(1)(2)(3);\nconsole.log(result)\t// 16"),l.createElement(c.Z,null,"There's a series of nested functions, all of which have access to the outer scope. In this context, it can be said that closures have access to all outer function scopes."),l.createElement(c.Z,null,"Closures can access members in ",l.createElement(u.BI,null,"module scope")," too. We'll learn about ",l.createElement(u.B,null,"modules")," in later sections, but for now, let's just try to understand module scope with closures."),l.createElement(a.Z,null,"// my-module.js\nlet x = 5;\nexport const getX = () => x;\nexport const setX = (val) => { x = val; };\n"),l.createElement(c.Z,null,"Here, the module ",l.createElement(u.I,null,"exports")," a pair of ",l.createElement(u.I,null,"getter-setter"),l.createElement(o.Z,null),"functions, which close over the module-scoped variable ",l.createElement(u.B,null,'"x"'),". Even when ",l.createElement(u.B,null,'"x"')," is not directly accessible from other modules, it can be read/written with the help of exported functions."),l.createElement(a.Z,null,'import { getX, setX } from "./my-module.js";\nconsole.log(getX()) // 5\nsetX(6);\nconsole.log(getX()) // 6'),l.createElement(c.Z,null,"Closures can close over imported values as well, which are regarded as",l.createElement(u.B,null,'"live bindings"'),", because when the original value changes, the imported members changes automatically."),l.createElement(a.Z,null,"// my-module.js\nexport let x =1;\nYesexport const setX = (val) => { x = val; };\n"),l.createElement(a.Z,null,'// closure-creator.js\nimport { x } from "./my-module.js";\nexport const getX = () => x;\n// Live binding is created for variable "x"'),l.createElement(a.Z,null,'// main-program.js\nimport { getX } from "./closure-creator.js";\nimport { setX } from "./my-module.js";\nconsole.log(getX())\t// 1\nsetX(2);\nconsole.log(getX())\t// 2\n'),l.createElement(c.Z,null,l.createElement(u.BI,null,"setX(2);"),l.createElement(u.cJ,null),"Above statement updated the value of ",l.createElement(u.B,null,'"x"'),", placed in",l.createElement(o.Z,null),l.createElement(u.IU,null,"my-module.js"),", and at the same time updated the value of",l.createElement(u.B,null,'"x"')," in ",l.createElement(u.IU,null,"closure-creator.js")," with the help of",l.createElement(u.B,null,"live binding"),"."))}},40868:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(67294),a=n(81391),r=n(91573),c=n(87398),o=n(68947),u=n(12050),i=n(9167);const s=function(){return l.createElement(l.Fragment,null,l.createElement(c.Z,{as:"h4"},"Problem creating Closures in loop"),l.createElement(o.Z,null,"Prior to the introduction of the ",l.createElement(i.B,null,"let")," keyword, a common problem with closures occurred when closures were created inside a loop. Let's try to explore the problem and then understand the possible solutions."),l.createElement(a.Z,{language:r.r.HTML},'\x3c!-- HTML required for the example --\x3e\n<p id="help">Helpful notes will appear here<p>\n<p>Email: <input type="text" id="email" name="email" /> <p>\n<p>Name: <input type="text” id="name" name="name" /> <p>\n<p>Age: <input type="text" id="age" name="age" /> <p>\n'),l.createElement(a.Z,null,'function getElement(id) { return document.getElementById(id); }\nfunction showHelp(help) { getElement("help").textContent = help; } \n\nvar helpText = [\n  { id: "email", help : "Your email address" },\n  { id: "name", help : "Your name" },\n  { id: "age", help : "Your age" },\n];\n\nfunction setupHelp() {\n  for(var i = 0; i< helpText.length; i++) {\n      var item  = helpText[i];\n      getElement(item.id).onfocus = function() { \n            showHelp(item.help);\n      }\n  }\n}\n\nsetupHelp();\n'),l.createElement(i.cJ,null),l.createElement(o.Z,null,"When the code runs, we'll see that no matter what field we ",l.createElement(i.I,null,"focus"),l.createElement(u.Z,null),"on, the help text of your ",l.createElement(i.B,null,'"age"')," is displayed. The reason for this is that the functions assigned to ",l.createElement(i.I,null,"onfocus")," are ",l.createElement(i.BI,null,"closures"),", they consist of the function definition and the captured lexical environment from the ",l.createElement(i.I,null,"setupHelp()")," ",l.createElement(u.Z,null),"function's scope. ",l.createElement(i.BI,null,"Three closures")," have been created by the loop, but each of them share the same lexical environment, which has a variable with changing values (",l.createElement(i.I,null,'"item"'),")."),l.createElement(o.Z,null,"Because the variable ",l.createElement(i.B,null,'"item"')," is declared with ",l.createElement(i.BI,null,"var"),", it has",l.createElement(u.Z,null),l.createElement(i.I,null,"function scope"),". The value of ",l.createElement(i.B,null,'"item.help"')," is determined when the ",l.createElement(i.I,null,"onfocus")," callbacks are executed. But, since the loop has already run its course by that time, the ",l.createElement(i.B,null,'"item"')," variable (shared by all closures) has been left pointing to the last entry in the",l.createElement(i.BI,null,"helpText")," array. Therefore, it will always display the",l.createElement(i.B,null,"last")," help text."),l.createElement(c.Z,{as:"h4"},"Solutions to the above problem"),l.createElement(o.Z,null,"Let's see possible solutions with and without ES6's ",l.createElement(i.BI,null,"let")," ","keyword."),l.createElement(o.Z,null,l.createElement(i.IU,null,"Solution 1:"),l.createElement(o.Z,null,"By creating more closures, in particular, by using a",l.createElement(i.BI,null,"function factory"),"."),l.createElement(a.Z,null,"function makeHelpCallback(help) {\n  return function() { showHelp(help); }\n}\n"),l.createElement(o.Z,null,"The ",l.createElement(i.BI,null,"makeHelpCallback()")," function creates a new"," ",l.createElement(i.I,null,"lexical environment")," for each callback, in which ",l.createElement(i.BI,null,'"help"')," ","refers to the corresponding item from the ",l.createElement(i.BI,null,"helpText")," array."),l.createElement(a.Z,null,"// Rewriting setupHelp to include the solution\nfunction setupHelp() {\n  for(var i = 0; i < helpText.length; i++) {\n    var item  = helpText[i];\n    getElement(item.id).onfocus = makeHelpCallback(item.help);\n  }\n}\n")),l.createElement(i.cJ,null),l.createElement(o.Z,null,l.createElement(i.IU,null,"Solution 2:"),l.createElement(o.Z,null,"By using ",l.createElement(i.I,null,"anonymous closures")," with the help of ",l.createElement(i.B,null,"IIFE"),l.createElement(u.Z,null)," (Immediately Invoked Function Expression)."),l.createElement(a.Z,null,"// Rewriting setupHelp to include the solution\nfunction setupHelp() {\n  for(var i = 0; i < helpText.length; i++) {\n    (function() {\n      var item  = helpText[i];\n      getElement(item.id).onfocus = function() {\n        showHelp(item.help);\n      }\n    })();\n  }\n}\n")),l.createElement(i.cJ,null),l.createElement(o.Z,null,l.createElement(i.IU,null,"Solution 3:"),l.createElement(o.Z,null,"By using ES6's ",l.createElement(i.BI,null,"let")," or ",l.createElement(i.BI,null,"const")," keyword. The use of",l.createElement(u.Z,null),l.createElement(i.I,null,"let"),l.createElement(u.Z,null),"or ",l.createElement(i.I,null,"const")," will create ",l.createElement(i.I,null,"block scope"),", hence fixing the problem."),l.createElement(a.Z,null,"// Rewriting setupHelp to include the solution\nfunction setupHelp(){\n  for(let i = 0; i< helpText.length; i++) {\n    let item  = helpText[i];\n    getElement(item.id).onfocus = () => {\n      showHelp(item.help);\n    }\n  }\n}\n")))}},31914:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var l=n(67294),a=n(81391),r=n(68947),c=n(12050),o=n(9167),u=n(25474);const i=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,null,"A ",l.createElement(o.B,null,"closure")," is the ",l.createElement(o.BI,null,"combination")," of a",l.createElement(o.BI,null,"function bundled together")," (enclosed) with the references to its",l.createElement(o.B,null,"surrounding state")," (the ",l.createElement(o.B,null,"lexical")," ",l.createElement(c.Z,null),l.createElement(o.I,null,"environment variables"),"). In other words, a closure gives us access to an out function's scope from an inner function,",l.createElement(o.BI,null,"when the parent function has returned"),". In JavaScript closures are ",l.createElement(o.BI,null,"created every time a function is created"),"."),l.createElement(r.Z,null,"Let's learn about ",l.createElement(o.B,null,"Lexical Scope"),", in order to understand closures better."),l.createElement(r.Z,null,l.createElement(u.default,null)),l.createElement(r.Z,null,"Since we know about ",l.createElement(o.I,null,"lexical scope"),", now let's try to understand closures."),l.createElement(r.Z,null,"In closure, the ",l.createElement(o.I,null,"lexical environment")," consists of any local variables that were ",l.createElement(o.I,null,"in-scope")," at the time of closure creation. Let's try to understand this with the help of an example."),l.createElement(a.Z,null,"function makeAdder(x) {\n  return function(y) { return x + y; }\n}\n"),l.createElement(r.Z,null,l.createElement(o.B,null,"Lexical environment contains"),": variable ",l.createElement(o.B,null,"x")),l.createElement(a.Z,null,"const add5 = makeAdder(5);"),l.createElement(r.Z,null,"Because the ",l.createElement(o.BI,null,"makerAdder()")," function is returned, ",l.createElement(o.B,null,'"x"'),l.createElement(c.Z,null),'should have been gone, but since it formed closure, "x" is still available in ',l.createElement(o.BI,null,"lexical scope"),".",l.createElement(o.cJ,null),l.createElement(o.cJ,null),l.createElement(o.I,null,"The value of the lexical environment variable ",l.createElement(o.B,null,"x")," would be",l.createElement(o.B,null,"5"),".")),l.createElement(a.Z,null,"const add10 = makeAdder(10);"),l.createElement(r.Z,null,l.createElement(o.I,null,"The value of the lexical environment variable ",l.createElement(o.B,null,"x")," would be",l.createElement(o.B,null,"10"),".")),l.createElement(a.Z,null,"console.log(add5(2))\t// 7\nconsole.log(add10(2))\t// 12\n"),l.createElement(r.Z,null,"Both ",l.createElement(o.BI,null,"add5()")," and ",l.createElement(o.BI,null,"add10()")," are closures. They share the same function body definition, but store different lexical environments. In",l.createElement(o.BI,null,"add5()"),", lexical environment ",l.createElement(o.B,null,"x")," is 5, while in",l.createElement(o.B,null,"add10()")," it is 10."),l.createElement(r.Z,null,"In essence, ",l.createElement(o.BI,null,"makeAdder()")," is a ",l.createElement(o.B,null,"function factory"),". It creates functions that can add a specific value to their arguments."))}},78755:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var l=n(67294),a=n(81391),r=n(87398),c=n(68947),o=n(12050),u=n(9167),i=[{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"increment()")," function")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"decrement()")," function")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"value()")," function")}],s=[{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"privateCtr")," variable")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"changeBy()")," function")}];const m=function(){return l.createElement(l.Fragment,null,l.createElement(c.Z,null,"One of the main use cases for closures is creating",l.createElement(u.BI,null,"private methods/properties")," in functions."),l.createElement(r.Z,{as:"h2"},"Creating private methods/properties using Closures"),l.createElement(c.Z,null,"JavaScript, prior to ",l.createElement(u.I,null,"classes"),", didn't have a native way of declaring private methods, but it was possible to emulate private methods using closures."),l.createElement(c.Z,null,"Let's try to understand with the help of an example:"),l.createElement(a.Z,null,"const makeCounter = function() {\n    // private members\n    let privateCtr = 0;\n    function changeBy(val) { privateCtr += val; }\n    // public members, returned from here\n    return {\n        increment() { changeBy(1); },\n        decrement() { changeBy(-1); },\n        value() { return privateCtr; }\n  }\n}\n\nconst counter = makeCounter();\ncounter.value();    // 0\ncounter.increment();\ncounter.value();    // 1\ncounter.decrement();\ncounter.value();    // 1"),l.createElement(u.cJ,null),l.createElement(c.Z,null,"The lexical environment contains two private members:",l.createElement(u.GS,{items:s})),l.createElement(c.Z,null,"The private members can't be accessed from outside the"," ",l.createElement(u.I,null,"makeCounter()")," ",l.createElement(o.Z,null),"function. Instead, public members should be used to access the private members."),l.createElement(c.Z,null,"Below are the public functions returned from ",l.createElement(u.I,null,"makeCounter()"),":",l.createElement(u.GS,{items:i})),l.createElement(c.Z,null,"Above public functions are closures that share the same lexical environment."))}},1849:(e,t,n)=>{n.r(t),n.d(t,{default:()=>E});var l=n(67294),a=n(9231),r=n(59044),c=n(87398),o=n(68947),u=n(15262),i=n(40868),s=n(31914),m=n(78755);const E=function(){return(0,a.Z)("UI-Geeks: JavaScript | Closures"),l.createElement(r.Z,null,l.createElement(c.Z,null,"Closures"),l.createElement(o.Z,null,l.createElement(s.default,null),l.createElement(m.default,null),l.createElement(u.default,null),l.createElement(i.default,null)))}},25474:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(67294),a=n(81391),r=n(87398),c=n(68947),o=n(12050),u=n(9167),i=[{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"Global Scope"),l.createElement(u.cJ,null),"Variables defined in global scope are available throughout the source code.")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"Function Scope"),l.createElement(u.cJ,null),"Variables defined in function scope are available in that function body only i.e they are local to that function.")},{label:l.createElement(l.Fragment,null,l.createElement(u.B,null,"Lexical Scope"),l.createElement(u.cJ,null),"This is also known as ",l.createElement(u.I,null,"block-scope")," and was introduced in",l.createElement(u.B,null,"ES6"),". Variables defined in lexical scope are available only within the enclosing block.")}];const s=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Lexical Scope"),l.createElement(c.Z,null,"The word ",l.createElement(u.B,null,'"lexical"')," refers to the fact that lexical scoping uses the ",l.createElement(u.B,null,"location")," where a variable is declared within the source code, to determine where that variable can be ",l.createElement(u.BI,null,"accessible"),"."),l.createElement(c.Z,null,"There are three types of scope in JavaScript:"),l.createElement(c.Z,null,l.createElement(u.GS,{expanded:!0,items:i})),l.createElement(c.Z,null,"In ES6, JavaScript introduced the",l.createElement(u.BI,null,"let")," and ",l.createElement(u.BI,null,"const"),l.createElement(o.Z,null)," keywords, which allows to create block-scoped variables."),l.createElement(a.Z,null,"if(true) { const x =1; }\nelse { const x = 2; }\nconsole.log(x);\t// ReferenceError"),l.createElement(c.Z,null,l.createElement(u.I,null,"The above statement gives ",l.createElement(u.B,null,"ReferenceError"),", because ",l.createElement(u.B,null,'"x"')," is a block-scoped variable and is not accessible here.")),l.createElement(c.Z,null,"In contrast to the above example, if we declare a variable using",l.createElement(u.BI,null,"var"),", it would create a ",l.createElement(u.I,null,"global scope")," and the variable should be available after the ",l.createElement(u.I,null,"if-else")," block."),l.createElement(a.Z,null,"if(true) { var x =1; }\nelse { var x = 2; }\nconsole.log(x);\t// 1"))}},59044:(e,t,n)=>{n.d(t,{Z:()=>I});var l=n(4942),a=n(94184),r=n.n(a),c=n(67294),o=n(83819),u=n(93379),i=n.n(u),s=n(7795),m=n.n(s),E=n(90569),h=n.n(E),d=n(3565),p=n.n(d),f=n(19216),b=n.n(f),v=n(44589),g=n.n(v),Z=n(94364),B={};B.styleTagTransform=g(),B.setAttributes=p(),B.insert=h().bind(null,"head"),B.domAPI=m(),B.insertStyleElement=b(),i()(Z.Z,B),Z.Z&&Z.Z.locals&&Z.Z.locals;var x=function(e){var t=e.children,n=r()((0,l.Z)({},"".concat(o.HL,"-container"),!0));return c.createElement("div",{className:n},t)};const I=(0,c.memo)(x)},9231:(e,t,n)=>{n.d(t,{Z:()=>a});var l=n(67294);const a=function(e){(0,l.useEffect)((function(){return document.title=e,function(){document.title="UI Geeks | UI Learning Platform"}}),[])}},94364:(e,t,n)=>{n.d(t,{Z:()=>o});var l=n(8081),a=n.n(l),r=n(23645),c=n.n(r)()(a());c.push([e.id,".ui-geeks-container{padding:1rem}\n",""]);const o=c}}]);