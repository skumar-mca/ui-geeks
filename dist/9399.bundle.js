"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[9399],{49399:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var l=n(67294),a=n(81391),s=n(87398),r=n(68947),c=n(12050),u=n(9167);const i=function(){return l.createElement(l.Fragment,null,l.createElement(s.Z,{as:"h2"},"static Methods and Properties"),l.createElement(r.Z,null,"The ",l.createElement(u.BI,null,"static")," keyword defines a ",l.createElement(u.I,null,"static method")," or ",l.createElement(c.Z,null),l.createElement(u.I,null,"property")," for a ",l.createElement(u.I,null,"class"),". Static members are called without instantiating the ",l.createElement(u.I,null,"class")," and cannot be called through a ",l.createElement(c.Z,null),l.createElement(u.I,null,"class instance"),". The ",l.createElement(u.I,null,"static")," methods are often used to create utility functions for the ",l.createElement(u.I,null,"class"),", whereas ",l.createElement(u.I,null,"static"),l.createElement(c.Z,null)," properties are useful for caches, fixed-configuration or any other data that don't need to be replicated across ",l.createElement(u.I,null,"class"),l.createElement(c.Z,null)," instances."),l.createElement(a.Z,null,'class User {\n  // "MINIMUM_AGE" is a static property\n  static MINIMUM_AGE = 18;\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getUserDetail() { return this.name + " - " + this.age; }\n  // "getValidUsers()" is a static method \n  static getValidUsers(userList) {\n    return userList.filter(usr => usr.age > this.MINIMUM_AGE);\n  }\n}\n'),l.createElement(r.Z,null,l.createElement(u.IU,null,"Example 1:"),l.createElement(a.Z,null,'const usr = new User("John", 25);\nusr.getUserDetail();  // "John - 25"')),l.createElement(r.Z,null,l.createElement(u.IU,null,"Example 2:"),l.createElement(r.Z,null,"In below example, ",l.createElement(u.BI,null,"getValidUsers()")," is called on the",l.createElement(u.BI,null,"User class")," and not on the instance of the class, like",l.createElement(u.BI,null,"usr"),"."),l.createElement(a.Z,null,'const usr = new User("John", 25);\nconst usr2 = new User("Jack", 17);\nconst validUsers = User.getValidUsers([usr, usr2]);\nconsole.log(validUsers) // [{ name : "John", age : 25}]\n')),l.createElement(r.Z,null,l.createElement(u.IU,null,"Example 3:"),l.createElement(r.Z,null,"Below example prints ",l.createElement(u.I,null,'"undefined"'),", because ",l.createElement(u.I,null,"static")," members can't be accessed by instance variables."),l.createElement(a.Z,null,'const usr = new User("John", 25);\nconsole.log(usr2.MINIMUM_AGE);  // undefined\n')))}}}]);