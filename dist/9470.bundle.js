"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[9470],{9470:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var l=t(67294),a=t(81391),c=t(87398),r=t(68947),u=t(9167);const i=function(){return l.createElement(l.Fragment,null,l.createElement(c.Z,{as:"h2"},"Function expression"),l.createElement(r.Z,null,"This is very similar to function declaration and has almost the same syntax. The main difference is the ",l.createElement(u.B,null,"name-of-function"),", which can be omitted to create ",l.createElement(u.BI,null,"anonymous functions"),". Another difference is that",l.createElement(u.B,null,"function expressions are not hoisted"),", while function declarations are",l.createElement(u.B,null,"hoisted"),"."),l.createElement(r.Z,null,l.createElement(u.I,null,"Syntax:"),l.createElement(u.cJ,null),"const",l.createElement(u.BI,null,"<","name-of-function"),">"," = function(",l.createElement(u.BI,null,"<","parameters",">"),") ","{",l.createElement(u.cJ,null),l.createElement(u.Ai,null,"..."),l.createElement(u.cJ,null),l.createElement(u.Ai,null,l.createElement(u.I,null,"<","body of function",">")),l.createElement(u.cJ,null),"}"),l.createElement(a.Z,null,'const add = function(a, b) { return a + b; }\n// <name-of-function> is "add", while <parameters> are "a" and "b".'))}}}]);