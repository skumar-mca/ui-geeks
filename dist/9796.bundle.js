"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[9796],{9796:(e,l,t)=>{t.r(l),t.d(l,{default:()=>u});var n=t(67294),a=t(81391),s=t(87398),c=t(68947),r=t(12050),i=t(9167);const u=function(){return n.createElement(n.Fragment,null,n.createElement(c.Z,null,"The ",n.createElement(i.BI,null,"extends")," ",n.createElement(i.I,null,"keyword")," is used to create a ",n.createElement(i.I,null,"class")," as a child of another ",n.createElement(i.I,null,"class"),", this mechanism is called",n.createElement(i.B,null,"inheritance"),". If there's a",n.createElement(r.Z,null)," ",n.createElement(i.I,null,"constructor")," present in the subclass, it needs to first call ",n.createElement(i.I,null,"super()"),n.createElement(r.Z,null)," before using ",n.createElement(i.BI,null,"this"),"."),n.createElement(c.Z,null,n.createElement(s.Z,{as:"h3"},"Base/Parent/Inherited Class"),n.createElement(c.Z,null,"This is the ",n.createElement(i.I,null,"class")," which will be used as a base for creating child",n.createElement(i.I,null,"classes"),". The basic role of ",n.createElement(i.BI,null,"base class")," is to contain",n.createElement(r.Z,null)," ",n.createElement(i.I,null,"common functionalities"),", which can be used by",n.createElement(i.BI,null,"multiple child classes"),"."),n.createElement(a.Z,null,"class Vehicle {\n  constructor(vehicleType, make, wheels) {\n    this.vehicleType = vehicleType;\n    this.make = make;\n    this.wheels = wheels;\n  }\n\n  showVehicleInfo() { \t\n    console.log(`${this.make} ${this.vehicleType} have ${this.wheels} wheels`);\n  }\n}\n")),n.createElement(c.Z,null,n.createElement(s.Z,{as:"h3"},"Child/Derived Class"),n.createElement(c.Z,null,"This is the ",n.createElement(i.I,null,"class")," which ",n.createElement(i.BI,null,"extends")," the functionality of the ",n.createElement(i.I,null,"base class"),". The role of a ",n.createElement(i.I,null,"derived class")," is to perform more specialized tasks. Derived ",n.createElement(i.I,null,"class"),n.createElement(i.B,null,"uses/overrides")," the ",n.createElement(i.I,null,"base class")," members, based on the need."),n.createElement(c.Z,null,n.createElement(i.BI,null,"super()"),": Calling ",n.createElement(i.I,null,"super()")," is important. It calls the parent class ",n.createElement(i.I,null,"constructor")," with the list of passed ",n.createElement(r.Z,null),n.createElement(i.I,null,"arguments"),". The ",n.createElement(i.BI,null,"super")," can also be used to call",n.createElement(i.B,null,"public")," ",n.createElement(i.I,null,"properties/methods")," of the parent ",n.createElement(i.I,null,"class"),"."),n.createElement(c.Z,null,n.createElement(i.IU,null,"Example 1:"),n.createElement(c.Z,null,"In below example, the ",n.createElement(i.BI,null,"showVehicleInfo()")," is not defined in",n.createElement(i.BI,null,"Bike class"),", but still this works, because it was ",n.createElement(r.Z,null),n.createElement(i.I,null,"inherited")," from the base class ",n.createElement(i.BI,null,"Vehicle"),"."),n.createElement(a.Z,null,'class Bike extends Vehicle {\n  constructor(make) {\n    super("Bike, make, 2);\n  }\n}\n\nconst bike = new Bike("Honda");\nbike.showVehicleInfo()  // "Honda Bike have 2 wheels"')),n.createElement(c.Z,null,n.createElement(i.IU,null,"Example 2:"),n.createElement(c.Z,null,"In below example, the ",n.createElement(i.BI,null,"showVehicleInfo()")," is not defined in",n.createElement(i.BI,null,"Car class"),", but still this works, because it was ",n.createElement(r.Z,null),n.createElement(i.I,null,"inherited")," from the base class ",n.createElement(i.BI,null,"Vehicle"),"."),n.createElement(a.Z,null,'class Car extends Vehicle {\n  constructor(make) {\n    super("Car", make, 4);\n  }\n}\n\nconst car = new Car("Maruti");\ncar.showVehicleInfo() // "Maruti Car have 4 wheels"'))))}}}]);