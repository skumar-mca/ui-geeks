"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[2049],{42049:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var o=t(67294),l=t(81391),a=t(91573),r=t(68947),s=t(12050),p=t(9167);const c=function(){return o.createElement(o.Fragment,null,o.createElement(r.Z,null,"Context provides a way to pass data through the ",o.createElement(p.I,null,"component tree"),o.createElement(s.Z,null)," without having to pass ",o.createElement(p.I,null,"props")," down manually at every level."),o.createElement(r.Z,null,"In React application, data is passed ",o.createElement(p.B,null,"top-down")," (parent to child component) via props, but this approach can lead to a concept called",o.createElement(p.B,null,'"prop drilling"'),", where we have to add ",o.createElement(p.I,null,"prop")," to every child component in the tree, whether or not that child component needs that",o.createElement(s.Z,null)," ",o.createElement(p.I,null,"prop"),". This continuous drilling is required to send the props to the desired component in the tree."),o.createElement(r.Z,null,o.createElement(p.IU,null,"Example:"),o.createElement(l.Z,{language:a.r.JSX},'const PropDrill = () => {\n  const userName = "John";\n  return <FirstComponent name = {userName} />\n}\n\nconst FirstComponent = (props) => {\n  const { name } = props;\n  // This do not use "name", but still we have to pass\n  // in order to pass the value to next child in tree\n  return <SecondComponent name = {name} />\n}\n\nconst SecondComponent = (props) => {\n  // This component needs "name" prop to display\n  const { name } = props;\n  return <div>Username is: {name}</div>\n}')))}}}]);