"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[6544],{36544:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var a=t(67294),s=t(81391),l=t(87398),r=t(68947),u=t(12050),c=t(9167);const m=function(){return a.createElement(a.Fragment,null,a.createElement(l.Z,{as:"h2"},"MIX-INS"),a.createElement(r.Z,null,a.createElement(c.B,null,"Abstract classes")," or ",a.createElement(c.B,null,"mix-ins")," are templates for classes. Class inheritance has a limitation that a ",a.createElement(c.I,null,"class")," can only",a.createElement(u.Z,null)," ",a.createElement(c.I,null,"extend")," one ",a.createElement(c.I,null,"class"),". A function with a super class as input and a subclass extending that superclass as output can be used to implement ",a.createElement(c.I,null,"mix-ins")," in JavaScript."),a.createElement(r.Z,null,a.createElement(c.IU,null,"Example:"),a.createElement(s.Z,null,"class BaseClass { \n  constructor(numArr) {\n    this.numArr = numArr;\n  }\n}\n"),a.createElement(s.Z,null,"const sumMixin = (Base) =>  class extends Base {\n  constructor(numArr) { super(numArr); }\n  sum() { return this.numArr.reduce((a, b) => a + b); }\n};"),a.createElement(s.Z,null,"const averageMixin = (Base) =>  class extends Base {\n  constructor(numArr) { super(numArr); }\n  average() { \n    return this.numArr.reduce((a, b) => a + b) / this.numArr.length; \n  }\n};\n"),a.createElement(s.Z,null,"class MathClass extends sumMixin(averageMixin(BaseClass)) { }\nconst math = new MathClass([2, 5, 6, 8]);\nmath.sum(); // 21\nmath.average(); // 5.25")))}}}]);