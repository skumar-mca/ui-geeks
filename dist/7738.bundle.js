"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[7738,8767,4826,6526,9470,9358,9463,5234,1898,6331,6006,7893],{58767:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(67294),a=t(81391),r=t(87398),c=t(68947),i=t(9167);const o=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Anonymous Functions"),l.createElement(c.Z,null,"Anonymous functions are one, which do not have any name. These are also known as ",l.createElement(i.B,null,'"lambda functions"'),". These are usually transient functions that are either passed into or returned from another function. It allows us to write a function inline with its usage, instead of declaring it somewhere else in the code."),l.createElement(c.Z,null,"Rest parameters allows a function to accept an indefinite number of arguments. This was introduced in ",l.createElement(i.B,null,"ES6"),"."),l.createElement(c.Z,null,l.createElement(i.I,null,"Writing the same add() function with the use of rest parameters.")),l.createElement(a.Z,null,'const sayHello = function() {\n  console.log("hello");\n}\nsayHello(); // "hello"'),l.createElement(a.Z,null,'let arr = ["cat", "dog", "rabbit"]\narr.map((itm)=>{ console.log(itm); })\n\n//Output:\n"cat"\n"dog"\n"rabbit"'))}},64826:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});var l=t(67294),a=t(81391),r=t(87398),c=t(26006),i=t(68947),o=t(12050),u=t(9167);const s=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"arguments"),l.createElement(i.Z,null,"The ",l.createElement(u.BI,null,'"arguments"')," is an Array-like object accessible inside a function, that contains the values of the parameters passed to the functions. This can be considered as a ",l.createElement(u.I,null,"special object")," containing all ",l.createElement(o.Z,null)," ",l.createElement(u.I,null,"parameters")," passed to the function at the time of",l.createElement(o.Z,null)," ",l.createElement(u.I,null,"calling/invocation"),"."),l.createElement(a.Z,null,"function add() {\n  let sum = 0;\n  for(const itm of arguments) { sum += itm; }\n    return sum;\n }\n\nconst result = add(1, 2, 5, 10)\t// 18"),l.createElement(i.Z,null,l.createElement(u.B,null,'"add"')," function can now accept any number of arguments, the keyword",l.createElement(u.BI,null,"arguments")," will automatically contain all the parameters passed at the time of function ",l.createElement(u.I,null,"call/invocation"),"."),l.createElement(c.Z,null,"JavaScript functions are ",l.createElement(u.B,null,"variadic"),", i.e., they can take any number of arguments. Functions are treated as ",l.createElement(u.BI,null,"first-class-citizens"),"0, because they can be used as other values. For example, they can be assigned to a variable, they can be passed as parameters to other functions, basically we can do all actions, which are applicable to other types."))}},76526:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(67294),a=t(81391),r=t(87398),c=t(68947),i=t(9167);const o=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Function declaration"),l.createElement(c.Z,null,l.createElement(i.B,null,"function")," keyword is used to declare a function."),l.createElement(c.Z,null,l.createElement(i.I,null,"Syntax:"),l.createElement(i.cJ,null),l.createElement(i.B,null,"function "),l.createElement(i.BI,null,"<","name-of-function"),">","(",l.createElement(i.BI,null,"<","parameters",">"),") ","{",l.createElement(i.cJ,null),l.createElement(i.Ai,null,"..."),l.createElement(i.cJ,null),l.createElement(i.Ai,null,l.createElement(i.I,null,"<","body of function",">")),l.createElement(i.cJ,null),"}"),l.createElement(c.Z,null,l.createElement(i.B,null,"name-of-function"),": A valid identifier/name for the created function."),l.createElement(c.Z,null,l.createElement(i.B,null,"parameters"),": These are named parameters/arguments. A function can have 0 (zero) or more parameters."),l.createElement(c.Z,null,l.createElement(i.B,null,"return"),": statement is used to return any valid value from the function. This value is returned to the ",l.createElement(i.I,null,"caller")," of the function,",l.createElement(i.B,null,"terminating")," the function. If no ",l.createElement(i.I,null,"return")," statement is given, then JavaScript returns ",l.createElement(i.I,null,"undefined"),"."),l.createElement(a.Z,null,'function add(a, b) { return a + b; } \n// <name-of-function> is "add", while <parameters> are "a" and "b".'))}},9470:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(67294),a=t(81391),r=t(87398),c=t(68947),i=t(9167);const o=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Function expression"),l.createElement(c.Z,null,"This is very similar to function declaration and has almost the same syntax. The main difference is the ",l.createElement(i.B,null,"name-of-function"),", which can be omitted to create ",l.createElement(i.BI,null,"anonymous functions"),". Another difference is that",l.createElement(i.B,null,"function expressions are not hoisted"),", while function declarations are",l.createElement(i.B,null,"hoisted"),"."),l.createElement(c.Z,null,l.createElement(i.I,null,"Syntax:"),l.createElement(i.cJ,null),"const",l.createElement(i.BI,null,"<","name-of-function"),">"," = function(",l.createElement(i.BI,null,"<","parameters",">"),") ","{",l.createElement(i.cJ,null),l.createElement(i.Ai,null,"..."),l.createElement(i.cJ,null),l.createElement(i.Ai,null,l.createElement(i.I,null,"<","body of function",">")),l.createElement(i.cJ,null),"}"),l.createElement(a.Z,null,'const add = function(a, b) { return a + b; }\n// <name-of-function> is "add", while <parameters> are "a" and "b".'))}},59358:(e,n,t)=>{t.r(n),t.d(n,{default:()=>i});var l=t(67294),a=t(87398),r=t(68947),c=t(9167);const i=function(){return l.createElement(l.Fragment,null,l.createElement(a.Z,{as:"h3"},"IIFE (Immediately Invoked Function Expression)"),l.createElement(r.Z,null,"JavaScript provides a mechanism for simultaneously declaring and invoking a function, using a single expression, it is called ",l.createElement(c.B,null,"IIFE"),"."),l.createElement(r.Z,null,l.createElement(c.I,null,"Syntax:"),l.createElement(c.cJ,null),l.createElement(c.B,null,"(function() { "),l.createElement(c.cJ,null),l.createElement(c.Ai,null,"..."),l.createElement(c.cJ,null),l.createElement(c.Ai,null,l.createElement(c.I,null,"<","body of function",">")),l.createElement(c.cJ,null),l.createElement(c.B,null,"})( );")),l.createElement(r.Z,null,"It is a design pattern which is also known as a",l.createElement(c.B,null,'"Self-Executing Anonymous Function"')," and contains two major parts:"),l.createElement(r.Z,null,l.createElement(c.GS,{expanded:!0,items:[{label:l.createElement(l.Fragment,null,"First is the anonymous function with",l.createElement(c.BI,null,"lexical scope"),". This prevents accessing variables within the IIFE scope from outside code, as well as avoids polluting global scope.")},{label:l.createElement(l.Fragment,null,"The second part ",l.createElement(c.B,null,'"( )"')," (",l.createElement(c.I,null,"Parenthesis, placed at the end of the function declaration"),"), creates the immediately invoked function expression, through which the JavaScript engine will directly interpret the function.")}]})))}},79463:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var l=t(67294),a=t(68947),r=t(9167);const c=function(){return l.createElement(l.Fragment,null,l.createElement(a.Z,null,"Functions are one of the core components of JavaScript. They are used to define a group of statements, so that they can be reused multiple times. They help reduce code size by encapsulating reusable code. Functions make code more readable/manageable by breaking code in logical blocks."),l.createElement(a.Z,null,"There are two ways of creating a function:",l.createElement(r.GS,{items:[{label:"Function declaration"},{label:"Function expression"}]})))}},35234:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var l=t(67294),a=t(81391),r=t(87398),c=t(26006),i=t(68947),o=t(9167);const u=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Function Invocation/Calling"),l.createElement(i.Z,null,l.createElement(o.I,null,"Syntax:"),l.createElement(o.cJ,null),l.createElement(o.BI,null,"functionName(parameters);")),l.createElement(i.Z,null,l.createElement(o.B,null,"functionName"),": Name of the function to be called.",l.createElement(o.cJ,null),l.createElement(o.B,null,"parameters"),": Parameters are assigned from left to right."),l.createElement(a.Z,null,"const result = add(2,5)\nconsole.log(result) // 7\n"),l.createElement(i.Z,null,"The function ",l.createElement(o.B,null,'"add()"')," is called with parameters ",l.createElement(o.B,null,"2")," and"," ",l.createElement(o.B,null,"5"),". Since parameters are assigned from ",l.createElement(o.I,null,"left to right"),", therefore, 2 is assigned to parameters",l.createElement(o.B,null,'"a"')," and 5 assigned to ",l.createElement(o.B,null,'"b"'),". Function ",l.createElement(o.BI,null,"returns")," sum of both the values and result is assigned a value of ",l.createElement(o.B,null,"7"),"."),l.createElement(c.Z,null,"We can pass more parameters than the function is expecting, all extra parameters are ignored.",l.createElement(o.cJ,null),"add(2, 5, 10); // ",l.createElement(o.B,null,"10 will be ignored")))}},87738:(e,n,t)=>{t.r(n),t.d(n,{default:()=>b});var l=t(67294),a=t(9231),r=t(59044),c=t(87398),i=t(68947),o=t(58767),u=t(64826),s=t(76526),m=t(9470),d=t(59358),f=t(79463),E=t(35234),h=t(11898),p=t(6331),g=function(){return(0,a.Z)("UI-Geeks: JavaScript | Functions"),l.createElement(r.Z,null,l.createElement(c.Z,null,"Functions"),l.createElement(i.Z,null,l.createElement(f.default,null),l.createElement(s.default,null),l.createElement(m.default,null),l.createElement(E.default,null),l.createElement(u.default,null),l.createElement(p.default,null),l.createElement(o.default,null),l.createElement(d.default,null),l.createElement(h.default,null)))};const b=(0,l.memo)(g)},11898:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(67294),a=t(81391),r=t(87398),c=t(68947),i=t(9167);const o=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Inner Functions"),l.createElement(c.Z,null,"JavaScript function ",l.createElement(i.I,null,"declarations/expressions")," are allowed inside another function. An important concept of nested functions is that they can",l.createElement(i.BI,null,"access variables of the parent function's scope"),"."),l.createElement(a.Z,null,'function parentFunc() {\n    const a = 1;\n    function innerFunc() {\n      const b = 4;\n      return a + b;\n      // variable "a" can be accessed here\n    }\n  return innerFunc();\n}'),l.createElement(c.Z,null,l.createElement(i.BI,null,"Inner/nested")," functions help writing more maintainable code. If a ",l.createElement(i.I,null,"function")," relies on one or more functions that are not used to any other part of the code, such ",l.createElement(i.I,null,"functions")," can be nested as utility functions inside the ",l.createElement(i.BI,null,"main function"),". This keeps the number of global functions down, which is always considered as a best practice."))}},6331:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});var l=t(67294),a=t(81391),r=t(87398),c=t(26006),i=t(68947),o=t(12050),u=t(9167);const s=function(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{as:"h2"},"Rest parameters"),l.createElement(i.Z,null,"Using ",l.createElement(u.BI,null,"arguments")," ",l.createElement(u.I,null,"object")," is pretty useful, but it does seem a little ",l.createElement(o.Z,null)," ",l.createElement(u.I,null,"verbose"),", because by looking at the function ",l.createElement(u.I,null,"declaration/expression"),", we can't predict whether the function expects any ",l.createElement(u.I,null,"argument")," or not. To make functions more readable, we can replace ",l.createElement(u.BI,null,"arguments")," with"," ",l.createElement(u.B,null,'"rest parameters"'),"."),l.createElement(i.Z,null,"Rest parameters allows a function to accept an indefinite number of arguments. This was introduced in ",l.createElement(u.B,null,"ES6"),"."),l.createElement(i.Z,null,l.createElement(u.I,null,"Writing the same add() function with the use of rest parameters.")),l.createElement(a.Z,null,"function add(...args) {\n  let sum = 0;\n  for(const itm of args) { sum += itm; }\n    return sum;\n}\n\nconst result = add(1, 2, 5, 10);  // 18"),l.createElement(c.Z,null,"It is important to note that wherever the rest parameters are placed in function declaration, it will store all arguments ",l.createElement(u.B,null,"after")," its declaration, but ",l.createElement(u.B,null,"not before"),".",l.createElement(a.Z,null,"function add(firstValue, …args) {}\nadd(1, 2, 5, 10)"),l.createElement(u.B,null,"1")," will be assigned to the ",l.createElement(u.B,null,'"firstValue"')," parameter, while",l.createElement(u.B,null,"2"),", ",l.createElement(u.B,null,"5"),l.createElement(o.Z,null),"and ",l.createElement(u.B,null,"10")," will be assigned to the rest parameter ",l.createElement(u.B,null,'"args"'),"."))}},59044:(e,n,t)=>{t.d(n,{Z:()=>w});var l=t(4942),a=t(94184),r=t.n(a),c=t(67294),i=t(83819),o=t(93379),u=t.n(o),s=t(7795),m=t.n(s),d=t(90569),f=t.n(d),E=t(3565),h=t.n(E),p=t(19216),g=t.n(p),b=t(44589),Z=t.n(b),v=t(94364),I={};I.styleTagTransform=Z(),I.setAttributes=h(),I.insert=f().bind(null,"head"),I.domAPI=m(),I.insertStyleElement=g(),u()(v.Z,I),v.Z&&v.Z.locals&&v.Z.locals;var y=function(e){var n=e.children,t=r()((0,l.Z)({},"".concat(i.HL,"-container"),!0));return c.createElement("div",{className:t},n)};const w=(0,c.memo)(y)},26006:(e,n,t)=>{t.d(n,{Z:()=>z});var l=t(4942),a=t(94184),r=t.n(a),c=t(67294),i=t(14289),o=t(78146),u=t(67115),s=t(76792),m=t(32209),d=t(41485),f=t(39602),E=t(44680),h=t(85893);const p=(0,f.Z)("h4");p.displayName="DivStyledAsH4";const g=(0,E.Z)("alert-heading",{Component:p}),b=(0,E.Z)("alert-link",{Component:u.Z}),Z={variant:"primary",show:!0,transition:m.Z,closeLabel:"Close alert"},v=c.forwardRef(((e,n)=>{const{bsPrefix:t,show:l,closeLabel:a,closeVariant:c,className:u,children:f,variant:E,onClose:p,dismissible:g,transition:b,...Z}=(0,i.Ch)(e,{show:"onClose"}),v=(0,s.vE)(t,"alert"),I=(0,o.Z)((e=>{p&&p(!1,e)})),y=!0===b?m.Z:b,w=(0,h.jsxs)("div",{role:"alert",...y?void 0:Z,ref:n,className:r()(u,v,E&&`${v}-${E}`,g&&`${v}-dismissible`),children:[g&&(0,h.jsx)(d.Z,{onClick:I,"aria-label":a,variant:c}),f]});return y?(0,h.jsx)(y,{unmountOnExit:!0,...Z,ref:void 0,in:l,children:w}):l?w:null}));v.displayName="Alert",v.defaultProps=Z;const I=Object.assign(v,{Link:b,Heading:g});var y=t(83819),w=t(93379),B=t.n(w),x=t(7795),F=t.n(x),k=t(90569),T=t.n(k),J=t(3565),A=t.n(J),S=t(19216),N=t.n(S),C=t(44589),j=t.n(C),P=t(11137),H={};H.styleTagTransform=j(),H.setAttributes=A(),H.insert=T().bind(null,"head"),H.domAPI=F(),H.insertStyleElement=N(),B()(P.Z,H),P.Z&&P.Z.locals&&P.Z.locals;var L=function(e){var n=e.children,t=e.noteText,a=void 0===t?"Note":t,i=e.variant,o=void 0===i?"primary":i,u=r()((0,l.Z)({},"".concat(y.HL,"-note"),!0));return c.createElement("div",{className:u},c.createElement("div",{className:"note-text"},a),c.createElement(I,{key:o,variant:o},n))};const z=(0,c.memo)(L)},9231:(e,n,t)=>{t.d(n,{Z:()=>a});var l=t(67294);const a=function(e){(0,l.useEffect)((function(){return document.title=e,function(){document.title="UI Geeks | UI Learning Platform"}}),[])}},94364:(e,n,t)=>{t.d(n,{Z:()=>i});var l=t(8081),a=t.n(l),r=t(23645),c=t.n(r)()(a());c.push([e.id,".ui-geeks-container{padding:1rem}\n",""]);const i=c},11137:(e,n,t)=>{t.d(n,{Z:()=>i});var l=t(8081),a=t.n(l),r=t(23645),c=t.n(r)()(a());c.push([e.id,".ui-geeks-note{margin-top:1.2rem;margin-bottom:3rem;font-style:italic}.ui-geeks-note .note-text{font-style:italic;position:relative;font-weight:bold;top:13px;z-index:9;margin-left:15px;background-color:#aba8f1;width:fit-content;padding:2px 10px 2px 10px;border-radius:4px}\n",""]);const i=c}}]);