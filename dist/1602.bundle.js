"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1602],{1602:(e,l,n)=>{n.r(l),n.d(l,{default:()=>o});var t=n(67294),a=n(81391),c=n(91573),u=n(87398),m=n(68947),s=n(12050),r=n(9167);const o=function(){return t.createElement(t.Fragment,null,t.createElement(u.Z,{as:"h3"},"useCallback()"),t.createElement(m.Z,null,"This Hook is used to create a ",t.createElement(r.I,null,"memoized callback"),", which will execute only on the change of the given dependencies."),t.createElement(m.Z,null,t.createElement(r.IU,null,"Syntax:"),t.createElement(a.Z,{language:c.r.JSX},"const memoizedCallback = useCallback(() => {\n  // expensive expressions\n}, [/* dependency list */])")),t.createElement(m.Z,null,"The ",t.createElement(r.BI,null,"useCallback")," will return a memoized version of the",t.createElement(s.Z,null)," ",t.createElement(r.B,null,"callback")," that only changes if one of the dependencies has changed."),t.createElement(m.Z,null,"The ",t.createElement(r.BI,null,"useCallback(fn, deps)")," is equivalent to",t.createElement(s.Z,null)," ",t.createElement(r.BI,null,"useMemo(() => fn, deps)"),"."),t.createElement(m.Z,null,t.createElement(r.IU,null,"Example:"),t.createElement(a.Z,{language:c.r.JSX},"const memoizedCallback = useCallback(() => {\n  doSomeExpensive(a, b);\n}, [a, b]);\n")),t.createElement(m.Z,null,"In the above code, ",t.createElement(r.B,null,'"doSomeExpensive"')," method will be called on change on the given dependencies ",t.createElement(r.B,null,'"a"')," and ",t.createElement(r.B,null,'"b"'),"."))}}}]);