"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[2108,6006,7893,6148,9045,6442,7075],{62108:(e,n,t)=>{t.r(n),t.d(n,{default:()=>c});var a=t(67294),l=t(81391),r=t(87398),s=t(26006),i=t(68947),o=t(9167);const c=function(){return a.createElement(a.Fragment,null,a.createElement(r.Z,{as:"h3"},"String Literals"),a.createElement(i.Z,null,"A string literal is zero or more characters enclosed in single (') or double (\") quotes. All the ",a.createElement(o.BI,null,"String")," object methods can be called on a string literal. JavaScript automatically converts the",a.createElement(o.I,null,"string literal")," to a temporary ",a.createElement(o.BI,null,"String")," object."),a.createElement(l.Z,null,'// Examples:\nconst str = "JavaScript Literal";\n\nconsole.log("JavaScript".length); // 10\n// length is a property of the String object,\n// which can be called on string literal.\n'),a.createElement(r.Z,{as:"h4"},"Template Literals"),a.createElement(i.Z,null,"These are string values enclosed by the ",a.createElement(o.BI,null,"back-tick (`)"),"character instead of double or single quotes. Also known as"," ",a.createElement(o.B,null,"string interpolation"),". They provide syntactic sugar for constructing strings. ",a.createElement(o.B,null,"${ }")," construct is used to add dynamic/variable value to the string literal."),a.createElement(l.Z,null,'// Example 1:\n// Multi line string values can be created.\nconst multiLineStr = `I am a multiline\nstring`; \n\n\n// Example 2:\nconst name  = "John";\nconst str = `My name is: ${name}.`;\n\n// ${} construct is used to add dynamic/variable value to the string literal.\nconsole.log(str); // "My name is: John."\n'),a.createElement(r.Z,{as:"h4"},"Tagged Templates"),a.createElement(i.Z,null,"These are a compact syntax for specifying a template literal along with a call to a ",a.createElement(o.B,null,'"tag" function')," for ",a.createElement(o.B,null,"parsing"),". A tagged template is just a more succinct and semantic way to invoke a function that processes a string with a set of relevant values."),a.createElement(l.Z,null,"const formatArgument = (arg) => {\n  if(Array.isArray(arg)) {\n    return arg.map((itm) => `# ${itm}`)\n              .join('\\n');\n  }\n\n  if(typeof arg === \"object\") {\n    return JSON.stringify(arg);\n  }\n  return arg;\n}\n\nconst printStr = (segments, ...args) => {\n  let msg = segments[0];\n  segments.slice(1).forEach((segment, index) => {\n    msg += formatArgument(args[index]) + segment;\n  });\n  console.log(msg);\n}"),a.createElement(i.Z,null,a.createElement(o.BI,null,"segments:")," This holds the list of ",a.createElement(o.B,null,"fixed text")," of the string literal.",a.createElement(o.cJ,null),a.createElement(o.BI,null,"Args:")," Holds the list of ",a.createElement(o.B,null,"dynamic values")," of the string literal.",a.createElement(o.cJ,null),"For any valid template literal, there will always be ",a.createElement(o.B,null,"N args")," and ",a.createElement(o.B,null,"(N+1) string segments"),"."),a.createElement(l.Z,null,'const todos = ["JavaScript", "ReactJs", "Angular"];\nconst progress = { js: 90, react: 60, angular: 20};\n\nprintStr`I am learning:\\n${todos}\nAnd my progress is: ${progress}`\n\n// Output:\nI am learning:\n# JS\n# ReactJs\n# Angular\nAnd my progress is: { "js" : 90, "react": 60, "angular": 20 }\n        '),a.createElement(s.Z,null,a.createElement(o.B,null,"console.log()")," uses similar string interpolation.",a.createElement(o.cJ,null),'console.log("Learning %o with %o percent progress", "JS", 50);',a.createElement(o.cJ,null),"// \"Learning 'JS' with 50 percent progress”"))}},26006:(e,n,t)=>{t.d(n,{Z:()=>_});var a=t(4942),l=t(94184),r=t.n(l),s=t(67294),i=t(14289),o=t(78146),c=t(67115),m=t(76792),g=t(32209),u=t(41485),d=t(39602),p=t(44680),h=t(85893);const E=(0,d.Z)("h4");E.displayName="DivStyledAsH4";const f=(0,p.Z)("alert-heading",{Component:E}),v=(0,p.Z)("alert-link",{Component:c.Z}),y={variant:"primary",show:!0,transition:g.Z,closeLabel:"Close alert"},b=s.forwardRef(((e,n)=>{const{bsPrefix:t,show:a,closeLabel:l,closeVariant:s,className:c,children:d,variant:p,onClose:E,dismissible:f,transition:v,...y}=(0,i.Ch)(e,{show:"onClose"}),b=(0,m.vE)(t,"alert"),Z=(0,o.Z)((e=>{E&&E(!1,e)})),x=!0===v?g.Z:v,k=(0,h.jsxs)("div",{role:"alert",...x?void 0:y,ref:n,className:r()(c,b,p&&`${b}-${p}`,f&&`${b}-dismissible`),children:[f&&(0,h.jsx)(u.Z,{onClick:Z,"aria-label":l,variant:s}),d]});return x?(0,h.jsx)(x,{unmountOnExit:!0,...y,ref:void 0,in:a,children:k}):a?k:null}));b.displayName="Alert",b.defaultProps=y;const Z=Object.assign(b,{Link:v,Heading:f});var x=t(83819),k=t(93379),w=t.n(k),A=t(7795),S=t.n(A),J=t(90569),B=t.n(J),j=t(3565),I=t.n(j),L=t(19216),N=t.n(L),T=t(44589),C=t.n(T),$=t(11137),H={};H.styleTagTransform=C(),H.setAttributes=I(),H.insert=B().bind(null,"head"),H.domAPI=S(),H.insertStyleElement=N(),w()($.Z,H),$.Z&&$.Z.locals&&$.Z.locals;var O=function(e){var n=e.children,t=e.noteText,l=void 0===t?"Note":t,i=e.variant,o=void 0===i?"primary":i,c=r()((0,a.Z)({},"".concat(x.HL,"-note"),!0));return s.createElement("div",{className:c},s.createElement("div",{className:"note-text"},l),s.createElement(Z,{key:o,variant:o},n))};const _=(0,s.memo)(O)},11137:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(8081),l=t.n(a),r=t(23645),s=t.n(r)()(l());s.push([e.id,".ui-geeks-note{margin-top:1.2rem;margin-bottom:3rem;font-style:italic}.ui-geeks-note .note-text{font-style:italic;position:relative;font-weight:bold;top:13px;z-index:9;margin-left:15px;background-color:#aba8f1;width:fit-content;padding:2px 10px 2px 10px;border-radius:4px}\n",""]);const i=s}}]);