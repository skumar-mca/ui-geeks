"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[1898],{11898:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});var a=t(67294),c=t(81391),r=t(87398),i=t(68947),l=t(9167);const s=function(){return a.createElement(a.Fragment,null,a.createElement(r.Z,{as:"h2"},"Inner Functions"),a.createElement(i.Z,null,"JavaScript function ",a.createElement(l.I,null,"declarations/expressions")," are allowed inside another function. An important concept of nested functions is that they can",a.createElement(l.BI,null,"access variables of the parent function's scope"),"."),a.createElement(c.Z,null,'function parentFunc() {\n    const a = 1;\n    function innerFunc() {\n      const b = 4;\n      return a + b;\n      // variable "a" can be accessed here\n    }\n  return innerFunc();\n}'),a.createElement(i.Z,null,a.createElement(l.BI,null,"Inner/nested")," functions help writing more maintainable code. If a ",a.createElement(l.I,null,"function")," relies on one or more functions that are not used to any other part of the code, such ",a.createElement(l.I,null,"functions")," can be nested as utility functions inside the ",a.createElement(l.BI,null,"main function"),". This keeps the number of global functions down, which is always considered as a best practice."))}}}]);