"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[285],{90285:(e,l,n)=>{n.r(l),n.d(l,{default:()=>u});var t=n(67294),a=n(81391),r=n(87398),i=n(68947),c=n(12050),o=n(9167);const u=function(){return t.createElement(t.Fragment,null,t.createElement(r.Z,{as:"h2"},"Temporal Dead Zone (TDZ)"),t.createElement(i.Z,null,"A variable declared with ",t.createElement(o.BI,null,"let")," or ",t.createElement(o.BI,null,"const")," is said to be in",t.createElement(o.BI,null,'"temporal dead zone"')," or ",t.createElement(o.BI,null,"TDZ"),", from the start of the block until code execution reaches the line where the variable is",t.createElement(c.Z,null)," ",t.createElement(o.I,null,"declared")," and ",t.createElement(o.I,null,"initialized"),"."),t.createElement(i.Z,null,"While inside the ",t.createElement(o.BI,null,"TDZ"),", the variable has not been initialized with a value and an attempt to access it will result in",t.createElement(o.B,null,"ReferenceError"),". This differs from ",t.createElement(o.BI,null,"var")," variables, which will return a value of ",t.createElement(o.BI,null,"undefined"),", if they are accessed before they are declared."),t.createElement(i.Z,null,t.createElement(o.IU,null,"Example 1:"),t.createElement(a.Z,null,"{\n  // TDZ starts at the beginning of the scope\n  console.log(varVariable);   // undefined\n  console.log(typeof varVariable);  // undefined\n  console.log(letVariable);   // ReferenceError\n  console.log(typeof letVariable);    // ReferenceError\n\n  var varVariable = 10;\n  let letVariable = 20;\n  // TDZ ends at the end of the scope\n}\n")),t.createElement(i.Z,null,"The term ",t.createElement(o.B,null,'"temporal"')," is used because the zone depends on the order of ",t.createElement(o.I,null,"execution (time)"),", rather than the order in which the code is",t.createElement(c.Z,null)," ",t.createElement(o.I,null,"written (position)"),"."))}}}]);