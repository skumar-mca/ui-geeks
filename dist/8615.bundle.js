"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[8615],{8615:(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});var l=n(67294),u=n(81391),r=n(91573),c=n(87398),a=n(68947),m=n(12050),s=n(9167);const o=function(){return l.createElement(l.Fragment,null,l.createElement(c.Z,{as:"h3"},"useRef()"),l.createElement(a.Z,null,"The ",l.createElement(s.B,null,"useRef")," returns a mutable ",l.createElement(s.I,null,"ref")," object whose",l.createElement(m.Z,null)," ",l.createElement(s.BI,null,'".current"')," property is initialized to the passed argument ",l.createElement(s.I,null,"(initialValue)"),". The returned object will persist for the full lifetime of the component. This hook is used with ",l.createElement(m.Z,null),l.createElement(s.B,null,"uncontrolled components"),"."),l.createElement(a.Z,null,l.createElement(s.IU,null,"Example:"),l.createElement(u.Z,{language:r.r.JSX},'const AutoFocusInput = () => {\n  const textInput = useRef();\n  useEffect(() =>  {\n    textInput.current.focusTextInput();\n  },[ ]);\n  return <input type="text" ref={this.textInput} />\n}\n')),l.createElement(a.Z,null,"React will assign the ",l.createElement(s.BI,null,'"current"')," property with the DOM element when the component ",l.createElement(s.I,null,"mounts"),", and assign it back to ",l.createElement(s.BI,null,"null"),l.createElement(m.Z,null)," when it ",l.createElement(s.I,null,"unmounts"),". For ",l.createElement(s.I,null,"class components"),",",l.createElement(m.Z,null)," ",l.createElement(s.BI,null,"ref")," updates happen before ",l.createElement(m.Z,null),l.createElement(s.BI,null,"componentDidMount()")," or ",l.createElement(s.BI,null,"componentDidUpdate()")," lifecycle methods."))}}}]);