"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[3481],{33481:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});var l=t(67294),a=t(81391),r=t(91573),o=t(68947),c=t(12050),m=t(9167);const s=function(){return l.createElement(l.Fragment,null,l.createElement(o.Z,null,"Since JSX embraces JavaScript expressions, we can use JavaScript constructs like for ",l.createElement(m.I,null,"loop, map(), forEach()")," or any other ",l.createElement(c.Z,null),l.createElement(m.I,null,"iterable entity")," of JavaScript to render a list of React elements/components."),l.createElement(o.Z,null,l.createElement(m.IU,null,"Example:"),l.createElement(a.Z,{language:r.r.JSX},'const ListComponent = (props) => {\n  const { items } = props;\n\t\n  const listElements = items.map((names) => {\n    return <li>{name}</li>\n  }\n\n  return <ul>{listElements}</ul>\n}\n\nconst element = <ListComponent items={["React", "Controlled Component"]} />\n')),l.createElement(o.Z,null,"In the above example, ",l.createElement(m.BI,null,"map()")," method is used to build the list of",l.createElement(c.Z,null)," ",l.createElement(m.B,null,"<li>")," elements. Above code will render below output:",l.createElement("ul",null,l.createElement("li",null,"React"),l.createElement("li",null,"Controlled Component"))))}}}]);