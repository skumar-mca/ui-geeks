"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[2585],{72585:(e,n,l)=>{l.r(n),l.d(n,{default:()=>o});var t=l(67294),a=l(81391),u=l(91573),r=l(87398),c=l(68947),m=l(9167);const o=function(){return t.createElement(t.Fragment,null,t.createElement(r.Z,{as:"h3"},"useMemo()"),t.createElement(c.Z,null,"The ",t.createElement(m.B,null,"useMemo")," will only recompute the ",t.createElement(m.B,null,"memoized value")," when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render. If no dependency array is provided, a new value will be computed on every render."),t.createElement(c.Z,null,t.createElement(m.IU,null,"Syntax:"),t.createElement(a.Z,{language:u.r.JSX},"const memoizedValue = useMemo(() => expensiveFunction, [/* dependencies */]);")),t.createElement(c.Z,null,t.createElement(m.IU,null,"Example:"),t.createElement(a.Z,{language:u.r.JSX},"const memoizedValue = useMemo(() => \n  computeExpensiveValue(a, b),\n[a, b]);")))}}}]);