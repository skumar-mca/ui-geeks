"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[9179],{69179:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var l=t(67294),a=t(81391),r=t(91573),i=t(87398),o=t(68947),c=t(12050),s=t(9167);const m=function(){return l.createElement(l.Fragment,null,l.createElement(i.Z,{as:"h2"},"Specifying Children with JSX"),l.createElement(o.Z,null,"If a tag is empty, we may close it immediately with ","/>",". For example:",l.createElement(a.Z,{language:r.r.JSX},"const element = <img src={imagePath} />"),l.createElement(o.Z,null,"But JSX may contain children too, everything between opening and closing tag is considered as the children of the element."),l.createElement(a.Z,{language:r.r.JSX},"const element = <div>\n  <h1>Adding children</h1>\n  <span>h1 and span are children of the parent div</span>\n</div>")),l.createElement(o.Z,null,"JSX removes whitespaces at the beginning and end of the line. It also removed blank lines. New lines adjacent to tags are removed. New lines that occur in the middle of string literals are condensed into a single space."),l.createElement(o.Z,null,l.createElement(s.IU,null,"Example:")," All of the below ","<div>"," render the same output.",l.createElement(a.Z,{language:r.r.JSX},"<div>Hello from React</div>\n\n<div>\n  Hello from React\n</div>\n\n<div>\n  Hello \n  from \n  React\n</div>\n\n<div>\n\n  Hello from React\n</div>\n")),l.createElement(o.Z,null,l.createElement(s.B,null,"Booleans, null and undefined are Ignored"),l.createElement(s.cJ,null),"false, null, undefined and true are valid children but are not rendered. Although these values can be used for conditionally rendering React elements."),l.createElement(o.Z,null,l.createElement(s.IU,null,"Example:"),l.createElement(s.cJ,null),l.createElement(a.Z,{language:r.r.JSX},"const ConditionalRender = (props) => { \n  return <div>\n    {props.showContent && <CustomButton>}\n  </div>\n}")),l.createElement(o.Z,null,"Above code will render ",l.createElement(s.B,null,"CustomButton")," component, only if ",l.createElement(c.Z,null),l.createElement(s.BI,null,"showContent")," variable has ",l.createElement(s.BI,null,"truthy value"),"."),l.createElement(o.Z,null,"One caveat in conditional rendering is that some ",l.createElement(s.BI,null,'"falsy" values'),", such as ",l.createElement(s.B,null,"zero (0)"),", are still rendered by React."),l.createElement(o.Z,null,l.createElement(s.IU,null,"Example:"),l.createElement(s.cJ,null),l.createElement(a.Z,{language:r.r.JSX},"const ConditionalRender = (props) => { \n  return <div>\n    { \n      props.items.length && \n      <span>Items Length: {props.items.length}</span>\n    }\n  </div>\n}")),l.createElement(o.Z,null,"Above code will render ",l.createElement(s.I,null,"<span>Item Length: 0</span>"),"."),l.createElement(o.Z,null,"To fix the above problem, make sure that the expression before ",l.createElement(c.Z,null),l.createElement(s.B,null,"&&")," is always ",l.createElement(s.I,null,"boolean"),"."),l.createElement(a.Z,{language:r.r.JSX},"const ConditionalRender = (props) => { \n  return <div>\n    { \n      props.items.length > 0 && \n      <span>Items Length: {props.items.length}</span>\n    }\n  </div>\n}\n"),l.createElement(o.Z,null,"Above code will not render anything, if ",l.createElement(c.Z,null),l.createElement(s.BI,null,"props.items.length === 0"),"."))}}}]);