"use strict";(self.webpackChunkui_geeks_in=self.webpackChunkui_geeks_in||[]).push([[7220],{47220:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var r=n(67294),l=n(81391),o=n(91573),a=n(87398),c=n(68947),s=n(12050),u=n(9167);const m=function(){return r.createElement(r.Fragment,null,r.createElement(a.Z,{as:"h3"},"Context.Provider"),r.createElement(c.Z,null,"Every Context object comes with a ",r.createElement(u.B,null,"Provider React Component")," that allows consuming components to subscribe to context changes."),r.createElement(c.Z,null,r.createElement(u.IU,null,"Syntax:"),r.createElement(l.Z,{language:o.r.JSX},"<ReactContext.Provider value={/* some value */} >")),r.createElement(c.Z,null,"The ",r.createElement(u.BI,null,"Provider")," component accepts a ",r.createElement(u.BI,null,"value")," ",r.createElement(u.I,null,"prop")," to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree."),r.createElement(c.Z,null,"All consumers that are descendants of a Provider will re-render whenever Provider's ",r.createElement(u.BI,null,"value")," ",r.createElement(u.I,null,"prop")," changes. The propagation from Provider to consumer is not subject to the ",r.createElement(s.Z,null),r.createElement(u.I,null,"shouldComponentUpdate()")," method, so the consumer is updated even when an ancestor component skips an update."))}}}]);